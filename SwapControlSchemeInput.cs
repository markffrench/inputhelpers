//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Packages/com.dividetheplunder.framework/Input/SwapControlSchemeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Framework.Input
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Packages/com.dividetheplunder.framework/Input/SwapControlSchemeInput.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @SwapControlSchemeInput: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @SwapControlSchemeInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwapControlSchemeInput"",
    ""maps"": [
        {
            ""name"": ""Switch"",
            ""id"": ""ef7b8f06-c74a-4106-9d4b-f6d761caf36d"",
            ""actions"": [
                {
                    ""name"": ""SwitchToGamepad"",
                    ""type"": ""Button"",
                    ""id"": ""e9415cca-74af-4eb1-bb8e-3689a7fd9a24"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToKBM"",
                    ""type"": ""Button"",
                    ""id"": ""dbb6b1c3-9759-4675-86e4-4c57473e07be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToTouch"",
                    ""type"": ""Button"",
                    ""id"": ""587210ab-b6d4-4b13-a406-8ad66d820f8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4ea43ff-88dd-442d-a618-7f168c3eb1ac"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99487172-3531-40ea-81fb-c6d2090f7f8c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c448f5-cdb2-4f40-95c9-c42a5a327547"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf88b0e6-6c54-4620-83c9-1a9be32153e4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ff6b152-d395-499a-b07a-1bc19cf43f8c"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0581682b-8883-418e-8bf2-76d927b29a8d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f554e4f-eefd-44d1-853d-f29c96123ff9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32ad128c-a632-47fd-8312-7ed247ad46d0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c360776-53cb-4f8a-912c-0237200e4d3c"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca3405cc-5fbc-410f-83c7-31e835997dcf"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ab4cb08-f466-4621-af5e-40165f710d81"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a5942f-8011-4e75-86e3-7bf9f7c5e257"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToKBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35859d90-8cd3-478e-8679-78a0f3561714"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToKBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28c2b7df-37ca-43b3-a6f6-a679daa3f66c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToKBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9028806b-b7fe-46f0-b851-26e3da717ef3"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToKBM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ddc71a0-678d-458a-9081-04f34244b808"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Switch
            m_Switch = asset.FindActionMap("Switch", throwIfNotFound: true);
            m_Switch_SwitchToGamepad = m_Switch.FindAction("SwitchToGamepad", throwIfNotFound: true);
            m_Switch_SwitchToKBM = m_Switch.FindAction("SwitchToKBM", throwIfNotFound: true);
            m_Switch_SwitchToTouch = m_Switch.FindAction("SwitchToTouch", throwIfNotFound: true);
        }

        ~@SwapControlSchemeInput()
        {
            UnityEngine.Debug.Assert(!m_Switch.enabled, "This will cause a leak and performance issues, SwapControlSchemeInput.Switch.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Switch
        private readonly InputActionMap m_Switch;
        private List<ISwitchActions> m_SwitchActionsCallbackInterfaces = new List<ISwitchActions>();
        private readonly InputAction m_Switch_SwitchToGamepad;
        private readonly InputAction m_Switch_SwitchToKBM;
        private readonly InputAction m_Switch_SwitchToTouch;
        /// <summary>
        /// Provides access to input actions defined in input action map "Switch".
        /// </summary>
        public struct SwitchActions
        {
            private @SwapControlSchemeInput m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public SwitchActions(@SwapControlSchemeInput wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "Switch/SwitchToGamepad".
            /// </summary>
            public InputAction @SwitchToGamepad => m_Wrapper.m_Switch_SwitchToGamepad;
            /// <summary>
            /// Provides access to the underlying input action "Switch/SwitchToKBM".
            /// </summary>
            public InputAction @SwitchToKBM => m_Wrapper.m_Switch_SwitchToKBM;
            /// <summary>
            /// Provides access to the underlying input action "Switch/SwitchToTouch".
            /// </summary>
            public InputAction @SwitchToTouch => m_Wrapper.m_Switch_SwitchToTouch;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_Switch; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="SwitchActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(SwitchActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="SwitchActions" />
            public void AddCallbacks(ISwitchActions instance)
            {
                if (instance == null || m_Wrapper.m_SwitchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SwitchActionsCallbackInterfaces.Add(instance);
                @SwitchToGamepad.started += instance.OnSwitchToGamepad;
                @SwitchToGamepad.performed += instance.OnSwitchToGamepad;
                @SwitchToGamepad.canceled += instance.OnSwitchToGamepad;
                @SwitchToKBM.started += instance.OnSwitchToKBM;
                @SwitchToKBM.performed += instance.OnSwitchToKBM;
                @SwitchToKBM.canceled += instance.OnSwitchToKBM;
                @SwitchToTouch.started += instance.OnSwitchToTouch;
                @SwitchToTouch.performed += instance.OnSwitchToTouch;
                @SwitchToTouch.canceled += instance.OnSwitchToTouch;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="SwitchActions" />
            private void UnregisterCallbacks(ISwitchActions instance)
            {
                @SwitchToGamepad.started -= instance.OnSwitchToGamepad;
                @SwitchToGamepad.performed -= instance.OnSwitchToGamepad;
                @SwitchToGamepad.canceled -= instance.OnSwitchToGamepad;
                @SwitchToKBM.started -= instance.OnSwitchToKBM;
                @SwitchToKBM.performed -= instance.OnSwitchToKBM;
                @SwitchToKBM.canceled -= instance.OnSwitchToKBM;
                @SwitchToTouch.started -= instance.OnSwitchToTouch;
                @SwitchToTouch.performed -= instance.OnSwitchToTouch;
                @SwitchToTouch.canceled -= instance.OnSwitchToTouch;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SwitchActions.UnregisterCallbacks(ISwitchActions)" />.
            /// </summary>
            /// <seealso cref="SwitchActions.UnregisterCallbacks(ISwitchActions)" />
            public void RemoveCallbacks(ISwitchActions instance)
            {
                if (m_Wrapper.m_SwitchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="SwitchActions.AddCallbacks(ISwitchActions)" />
            /// <seealso cref="SwitchActions.RemoveCallbacks(ISwitchActions)" />
            /// <seealso cref="SwitchActions.UnregisterCallbacks(ISwitchActions)" />
            public void SetCallbacks(ISwitchActions instance)
            {
                foreach (var item in m_Wrapper.m_SwitchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SwitchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="SwitchActions" /> instance referencing this action map.
        /// </summary>
        public SwitchActions @Switch => new SwitchActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Switch" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="SwitchActions.AddCallbacks(ISwitchActions)" />
        /// <seealso cref="SwitchActions.RemoveCallbacks(ISwitchActions)" />
        public interface ISwitchActions
        {
            /// <summary>
            /// Method invoked when associated input action "SwitchToGamepad" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwitchToGamepad(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SwitchToKBM" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwitchToKBM(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SwitchToTouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwitchToTouch(InputAction.CallbackContext context);
        }
    }
}
